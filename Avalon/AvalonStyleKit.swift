//
//  AvalonStyleKit.swift
//  Avalon
//
//  Created by Kyle Bashour on 1/28/16.
//  Copyright (c) 2016 Avalon Studios. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class AvalonStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let shadowColor: UIColor = UIColor(red: 0.942, green: 0.321, blue: 0.321, alpha: 1.000)
        static let shadow: NSShadow = NSShadow(color: AvalonStyleKit.shadowColor, offset: CGSizeMake(0.1, -0.1), blurRadius: 3)
        static var imageOfMutineersIcon: UIImage?
        static var mutineersIconTargets: [AnyObject]?
        static var imageOfFailedMissionHighlight: UIImage?
        static var failedMissionHighlightTargets: [AnyObject]?
        static var imageOfSuccessfulMissionHighlight: UIImage?
        static var successfulMissionHighlightTargets: [AnyObject]?
        static var imageOfCurrentMissionHighlight: UIImage?
        static var currentMissionHighlightTargets: [AnyObject]?
        static var imageOfDefaultMissionHighlight: UIImage?
        static var defaultMissionHighlightTargets: [AnyObject]?
    }

    //// Colors

    public class var shadowColor: UIColor { return Cache.shadowColor }

    //// Shadows

    public class var shadow: NSShadow { return Cache.shadow }

    //// Drawing Methods

    public class func drawMutineersIcon() {
        //// Color Declarations
        let strokeColor = UIColor(red: 0.829, green: 0.000, blue: 0.034, alpha: 1.000)

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(30, 16))
        bezier3Path.addCurveToPoint(CGPointMake(16, 30), controlPoint1: CGPointMake(30, 23.73), controlPoint2: CGPointMake(23.73, 30))
        bezier3Path.addCurveToPoint(CGPointMake(2, 16), controlPoint1: CGPointMake(8.27, 30), controlPoint2: CGPointMake(2, 23.73))
        bezier3Path.addCurveToPoint(CGPointMake(16, 2), controlPoint1: CGPointMake(2, 8.27), controlPoint2: CGPointMake(8.27, 2))
        bezier3Path.addCurveToPoint(CGPointMake(30, 16), controlPoint1: CGPointMake(23.73, 2), controlPoint2: CGPointMake(30, 8.27))
        bezier3Path.closePath()
        bezier3Path.moveToPoint(CGPointMake(2.87, 20.48))
        bezier3Path.addCurveToPoint(CGPointMake(9.95, 3.97), controlPoint1: CGPointMake(2.87, 20.48), controlPoint2: CGPointMake(11.77, 11.47))
        bezier3Path.addCurveToPoint(CGPointMake(15.94, 29.37), controlPoint1: CGPointMake(10.13, 2.43), controlPoint2: CGPointMake(15.94, 24.12))
        bezier3Path.moveToPoint(CGPointMake(29, 20.45))
        bezier3Path.addCurveToPoint(CGPointMake(21.92, 3.95), controlPoint1: CGPointMake(29, 20.45), controlPoint2: CGPointMake(20.1, 11.44))
        bezier3Path.addCurveToPoint(CGPointMake(15.94, 29.34), controlPoint1: CGPointMake(21.75, 2.4), controlPoint2: CGPointMake(15.94, 24.09))
        strokeColor.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.stroke()
    }

    public class func drawFailedMissionHighlight() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.897, green: 0.187, blue: 0.187, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(4, 4, 24, 24), cornerRadius: 6)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, AvalonStyleKit.shadow.shadowOffset, AvalonStyleKit.shadow.shadowBlurRadius, (AvalonStyleKit.shadow.shadowColor as! UIColor).CGColor)
        color.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawSuccessfulMissionHighlight() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow3 = NSShadow(color: UIColor.greenColor(), offset: CGSizeMake(0.1, -0.1), blurRadius: 3)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(4, 4, 24, 24), cornerRadius: 6)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow3.shadowOffset, shadow3.shadowBlurRadius, (shadow3.shadowColor as! UIColor).CGColor)
        UIColor.greenColor().setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawCurrentMissionHighlight() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let lightBlue = UIColor(red: 0.000, green: 0.864, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow4 = NSShadow(color: lightBlue, offset: CGSizeMake(0.1, -0.1), blurRadius: 3)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(4, 4, 24, 24), cornerRadius: 6)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow4.shadowOffset, shadow4.shadowBlurRadius, (shadow4.shadowColor as! UIColor).CGColor)
        lightBlue.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()
        CGContextRestoreGState(context)
    }

    public class func drawDefaultMissionHighlight() {
        //// Color Declarations
        let color2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.157)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(4, 4, 24, 24), cornerRadius: 6)
        color2.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
    }

    //// Generated Images

    public class var imageOfMutineersIcon: UIImage {
        if Cache.imageOfMutineersIcon != nil {
            return Cache.imageOfMutineersIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(32, 32), false, 0)
            AvalonStyleKit.drawMutineersIcon()

        Cache.imageOfMutineersIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfMutineersIcon!
    }

    public class var imageOfFailedMissionHighlight: UIImage {
        if Cache.imageOfFailedMissionHighlight != nil {
            return Cache.imageOfFailedMissionHighlight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(32, 32), false, 0)
            AvalonStyleKit.drawFailedMissionHighlight()

        Cache.imageOfFailedMissionHighlight = UIGraphicsGetImageFromCurrentImageContext().resizableImageWithCapInsets(UIEdgeInsetsMake(12, 12, 12, 12), resizingMode: .Stretch)
        UIGraphicsEndImageContext()

        return Cache.imageOfFailedMissionHighlight!
    }

    public class var imageOfSuccessfulMissionHighlight: UIImage {
        if Cache.imageOfSuccessfulMissionHighlight != nil {
            return Cache.imageOfSuccessfulMissionHighlight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(32, 32), false, 0)
            AvalonStyleKit.drawSuccessfulMissionHighlight()

        Cache.imageOfSuccessfulMissionHighlight = UIGraphicsGetImageFromCurrentImageContext().resizableImageWithCapInsets(UIEdgeInsetsMake(12, 12, 12, 12), resizingMode: .Stretch)
        UIGraphicsEndImageContext()

        return Cache.imageOfSuccessfulMissionHighlight!
    }

    public class var imageOfCurrentMissionHighlight: UIImage {
        if Cache.imageOfCurrentMissionHighlight != nil {
            return Cache.imageOfCurrentMissionHighlight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(32, 32), false, 0)
            AvalonStyleKit.drawCurrentMissionHighlight()

        Cache.imageOfCurrentMissionHighlight = UIGraphicsGetImageFromCurrentImageContext().resizableImageWithCapInsets(UIEdgeInsetsMake(12, 12, 12, 12), resizingMode: .Stretch)
        UIGraphicsEndImageContext()

        return Cache.imageOfCurrentMissionHighlight!
    }

    public class var imageOfDefaultMissionHighlight: UIImage {
        if Cache.imageOfDefaultMissionHighlight != nil {
            return Cache.imageOfDefaultMissionHighlight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(32, 32), false, 0)
            AvalonStyleKit.drawDefaultMissionHighlight()

        Cache.imageOfDefaultMissionHighlight = UIGraphicsGetImageFromCurrentImageContext().resizableImageWithCapInsets(UIEdgeInsetsMake(12, 12, 12, 12), resizingMode: .Stretch)
        UIGraphicsEndImageContext()

        return Cache.imageOfDefaultMissionHighlight!
    }

    //// Customization Infrastructure

    @IBOutlet var mutineersIconTargets: [AnyObject]! {
        get { return Cache.mutineersIconTargets }
        set {
            Cache.mutineersIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: AvalonStyleKit.imageOfMutineersIcon)
            }
        }
    }

    @IBOutlet var failedMissionHighlightTargets: [AnyObject]! {
        get { return Cache.failedMissionHighlightTargets }
        set {
            Cache.failedMissionHighlightTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: AvalonStyleKit.imageOfFailedMissionHighlight)
            }
        }
    }

    @IBOutlet var successfulMissionHighlightTargets: [AnyObject]! {
        get { return Cache.successfulMissionHighlightTargets }
        set {
            Cache.successfulMissionHighlightTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: AvalonStyleKit.imageOfSuccessfulMissionHighlight)
            }
        }
    }

    @IBOutlet var currentMissionHighlightTargets: [AnyObject]! {
        get { return Cache.currentMissionHighlightTargets }
        set {
            Cache.currentMissionHighlightTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: AvalonStyleKit.imageOfCurrentMissionHighlight)
            }
        }
    }

    @IBOutlet var defaultMissionHighlightTargets: [AnyObject]! {
        get { return Cache.defaultMissionHighlightTargets }
        set {
            Cache.defaultMissionHighlightTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: AvalonStyleKit.imageOfDefaultMissionHighlight)
            }
        }
    }

}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
